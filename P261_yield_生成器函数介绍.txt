生成器函数（Generator Function）是 Python 中一种特殊的函数，它允许你逐步生成值，而不是一次性返回所有值。
    生成器函数使用 yield 语句来生成值，并且可以在每次生成值后暂停执行，保存当前的状态，
    直到下一次调用时继续从上次暂停的地方恢复执行。这使得生成器非常适合处理大数据集或无限序列，
    因为它不会一次性将所有数据加载到内存中，而是按需生成数据。





生成器函数的基本语法：
    生成器函数的定义与普通函数类似，但有一个关键的区别：生成器函数使用 yield 语句而不是 return 语句来返回值。
    每次遇到 yield 语句时，生成器会生成一个值并暂停执行，等待下一次调用。




生成器的主要优点包括：
    节省内存：生成器按需生成值，而不是一次性将所有值加载到内存中。这对于处理大体量的数据或无限序列非常有用。
    惰性求值：生成器只在需要时生成下一个值，因此可以提高性能，尤其是在处理大量数据时。
    简化代码：生成器可以简化代码逻辑，尤其是当你需要逐步生成值时，避免了复杂的循环和状态管理。




生成器的应用场景
    处理大文件：你可以使用生成器逐行读取文件，而不需要一次性将整个文件加载到内存中。
    处理无限序列：生成器可以生成无限序列，例如斐波那契数列、素数序列等。
    管道处理：生成器可以与其他生成器或函数组合使用，形成数据处理管道，逐步处理数据。
    异步编程：生成器可以与协程（coroutine）结合使用，实现异步编程。





生成器与迭代器的关系
        生成器是迭代器的一种特殊形式。每个生成器都是一个迭代器，但并不是所有的迭代器都是生成器。生成器通过 yield 语句生成值，
        并且可以在每次生成值后暂停执行，而普通的迭代器只能逐个返回值，不能保存状态。




总结
    生成器函数 是一种特殊的函数，使用 yield 语句逐步生成值，而不是一次性返回所有值。
    生成器可以在每次生成值后暂停执行，并保存局部状态，直到下一次调用时恢复执行。
    生成器非常适合处理大数据集或无限序列，因为它按需生成值，节省内存并提高性能。
    生成器可以通过 for 循环、next() 函数或生成器表达式来使用。
    生成器是迭代器的一种特殊形式，具有状态保存和惰性求值的特点。




另见：书P310页进阶用法。