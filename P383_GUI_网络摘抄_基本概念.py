# 摘自：通义千问 2025-1-3
# 问：GUI基本概念？

# 答：
# GUI（图形用户界面）基本概念
    # GUI（Graphical User Interface，图形用户界面） 是一种通过图形元素（如窗口、按钮、菜单等）与用户进行交互的界面设计。
    # 与命令行界面（CLI）不同，GUI 允许用户通过点击、拖动、输入等方式与应用程序进行交互，而不需要输入复杂的命令。
    # GUI 使得软件更加直观、易用，尤其适合普通用户。

########################################################################################
# GUI 的主要组成部分

    # 窗口（Window）：
        # 窗口是 GUI 应用程序的基本容器，所有的其他组件（如按钮、文本框等）都放置在窗口中。
        # 窗口可以有标题栏、最小化/最大化按钮、关闭按钮等。
        # 在 tkinter 中，主窗口由 Tk() 类创建。

    # 小部件（Widgets）：
        # 小部件是 GUI 中的交互元素，它们可以是按钮、标签、文本框、下拉菜单、复选框等。
        # 每个小部件都有自己的属性和方法，用于设置其外观和行为。
        # 常见的小部件包括：
            # Label：显示文本或图像。
            # Button：用户点击后执行某个操作。
            # Entry：允许用户输入文本。
            # Text：多行文本输入框。
            # Checkbutton：复选框，允许用户选择或取消选择。
            # Radiobutton：单选按钮，用户只能选择一个选项。
            # Listbox：显示一个项目列表，用户可以选择其中的一项或多项目。
            # Menu：菜单栏，通常位于窗口顶部，提供各种功能选项。
            # Frame：用于组织其他小部件的容器。

    # 布局管理器（Layout Managers）：
        # 布局管理器用于控制小部件在窗口中的排列方式。tkinter 提供了三种常见的布局管理器：
            # pack()：将小部件按顺序排列，支持水平、垂直或填充整个窗口。
            # grid()：将窗口划分为网格，每个小部件可以放置在特定的行和列中。适用于表格形式的布局。
            # place()：允许你使用绝对坐标（x, y）来精确放置小部件。适用于需要精确定位的情况。

    # 事件处理（Event Handling）：
        # GUI 应用程序是事件驱动的，即它们响应用户的操作（如点击按钮、输入文本等）。
        # 每个用户操作都会触发一个事件，程序可以通过绑定事件处理器（回调函数）来响应这些事件。
            # 例如，你可以为按钮绑定一个点击事件，当用户点击按钮时，程序会执行相应的代码。
            # 在 tkinter 中，事件处理通常通过 bind() 方法或小部件的命令参数（如 command）来实现。
        # 主事件循环（Main Event Loop）：
            # 主事件循环是 GUI 应用程序的核心，它负责监听用户的输入并更新窗口内容。tkinter 的主事件循环通过 mainloop() 方法启动。
            # mainloop() 会一直运行，直到用户关闭窗口或程序结束。它会不断检查是否有新的事件发生，并调用相应的事件处理器。

    # 对话框（Dialogs）：
        # 对话框是用于与用户进行简单交互的窗口，例如提示用户输入信息、确认操作或显示消息。
        # 常见的对话框类型包括：
            # 消息框（Message Box）：用于显示消息或提示用户。
            # 文件对话框（File Dialog）：用于选择文件或目录。
            # 颜色选择器（Color Chooser）：用于选择颜色。
            # 输入对话框（Input Dialog）：用于获取用户输入。

    # 主题和样式（Themes and Styles）：
        # 主题和样式用于定义 GUI 的外观，包括小部件的颜色、字体、边框等。不同的操作系统和平台可能有不同的默认主题。
        # tkinter 提供了 ttk 模块，用于创建更现代的、可自定义的小部件样式。你可以通过 Style 类来自定义小部件的外观。




########################################################################################
# GUI 开发库
    # Python 提供了多个用于开发 GUI 应用程序的库，以下是几个常见的库：


#------------------------------------------------------------------------------
# tkinter：
    # Python 标准库自带的 GUI 工具包，简单易用，适合初学者。
    # 支持常见的小部件和布局管理器，功能较为基础。
    
# 示例代码：
import tkinter as tk

win = tk.Tk()
tk.Label(win, text="Hello, Tkinter!").pack()
win.mainloop()



#------------------------------------------------------------------------------
# PyQt：
    # 一个功能强大的跨平台 GUI 库，基于 Qt 框架。
    # 提供丰富的控件和高级功能，适合开发复杂的应用程序。
    # 需要安装额外的库，例如 PyQt5 或 PyQt6。
# 示例代码：

# from PyQt5.QtWidgets import QApplication, QLabel  # 本电脑没装这个库

# app = QApplication([])
# label = QLabel("Hello, PyQt!")
# label.show()
# app.exec_()




#------------------------------------------------------------------------------
# wxPython：
    # 一个基于 wxWidgets 的 Python GUI 库，提供了原生的跨平台界面。
    # 适合开发具有原生外观的应用程序。
# 示例代码：

# import wx     # 本电脑没装这个库

# app = wx.App(False)
# frame = wx.Frame(None, title="Hello, wxPython!")
# frame.Show(True)
# app.MainLoop()




#------------------------------------------------------------------------------
# Kivy：
    # 一个专注于触摸屏设备的 Python GUI 库，适合开发移动应用和多点触控界面。
    # 支持多种输入设备，如鼠标、触摸屏、键盘等。
# 示例代码：

# 本系统没有安装这个库
# from kivy.app import App
# from kivy.uix.label import Label

# class MyApp(App):
#     def build(self):
#         return Label(text="Hello, Kivy!")

# if __name__ == "__main__":
#     MyApp().run()



########################################################################################
# GUI 开发的基本流程

    # 导入库：
        # 导入你选择的 GUI 库，例如 tkinter、PyQt、wxPython 等。
    # 创建主窗口：
        # 创建应用程序的主窗口，并设置窗口的标题、大小等属性。
    # 添加小部件：
        # 向主窗口中添加各种小部件（如按钮、标签、文本框等），并设置它们的属性。
    # 设置布局：
        # 使用布局管理器（如 pack()、grid() 或 place()）来安排小部件的位置。
    # 绑定事件：
        # 为小部件绑定事件处理器（如按钮的点击事件），以便在用户交互时执行相应的操作。
    # 启动主事件循环：
        # 调用 mainloop() 启动主事件循环，使应用程序开始监听用户的输入并更新窗口内容。
    # 处理用户输入：
        # 在事件处理器中编写代码，处理用户的输入并更新应用程序的状态。
    # 关闭窗口：
        # 当用户关闭窗口时，程序会自动退出主事件循环并结束。

# 示例：简单的 tkinter GUI 应用程序

import tkinter as tk
from tkinter import messagebox

# 创建主窗口
win = tk.Tk()
win.title("My First GUI App")
win.geometry("300x200")

# 添加标签
label = tk.Label(win, text="Enter your name:")
label.pack()

# 添加输入框
entry = tk.Entry(win)
entry.pack()

# 定义按钮点击事件
def on_button_click():
    name = entry.get()
    if name:
        messagebox.showinfo("Hello", f"Hello, {name}!")
    else:
        messagebox.showwarning("Empty Input", "Please enter a name.")

# 添加按钮
button = tk.Button(win, text="Say Hello", command=on_button_click)
button.pack()

# 启动主事件循环
win.mainloop()




########################################################################################
# 总结
    # GUI 是一种通过图形元素与用户进行交互的界面设计，相比命令行界面更加直观和易用。
    # 窗口 是 GUI 应用程序的基本容器，小部件 是用户交互的元素，布局管理器 控制小部件的排列，事件处理 响应用户的操作，
        # 主事件循环 保持应用程序的运行。
    # Python 提供了多个 GUI 开发库，如 tkinter、PyQt、wxPython 和 Kivy，每种库都有其特点和适用场景。
    # 开发 GUI 应用程序的基本流程包括创建窗口、添加小部件、设置布局、绑定事件、启动主事件循环等。