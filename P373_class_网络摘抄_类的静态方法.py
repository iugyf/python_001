# 摘自：通义千问2025-1-2
# 问：类的静态方法


# 答：
# 类的静态方法（Static Methods）
    # 静态方法（Static Method） 是 Python 类中的一种特殊方法，它不依赖于类的实例或类本身的状态。静态方法与普通方法的主要区别在于：
        # 普通方法：需要通过实例调用，并且第一个参数是 self，表示当前实例。
        # 静态方法：可以通过类或实例调用，但它不需要访问实例或类的状态，因此没有 self 或 cls 参数。

#########################################################################################
# 静态方法的特点：
    # 不依赖于实例：静态方法不访问或修改类的实例属性或状态，因此它们不需要 self 参数。
    # 不依赖于类：静态方法也不访问或修改类本身的属性或状态，因此它们不需要 cls 参数。
    # 可以通过类或实例调用：静态方法可以使用类名或实例来调用，但它们不会自动接收 self 或 cls 作为第一个参数。
    # 使用 @staticmethod 装饰器：为了定义静态方法，必须在方法定义前使用 @staticmethod 装饰器。

# 为什么使用静态方法？
    # 静态方法通常用于以下场景：
        # 工具函数：当你有一个与类相关的函数，但它不需要访问类或实例的属性时，可以将其定义为静态方法。这使得代码更加清晰，表明该方法与类的关系，但不依赖于类的状态。
        # 辅助功能：静态方法可以用于实现一些辅助功能，例如验证输入、计算某些值等。
        # 逻辑分离：静态方法可以帮助将某些逻辑从类的其他方法中分离出来，使代码更具模块化和可读性。
    # 静态方法 vs. 类方法 vs. 实例方法
        # 方法类型	第一个参数	调用方式	用途
        # 实例方法	self	通过实例调用	访问和修改实例的状态
        # 类方法	cls	通过类或实例调用	访问和修改类的状态
        # 静态方法	无	通过类或实例调用	不依赖于类或实例的状态


#########################################################################################
# 静态方法的定义和使用
    # 1. 定义静态方法
        # 要定义一个静态方法，你需要在方法定义前使用 @staticmethod 装饰器。静态方法不需要 self 或 cls 参数。

class MathUtils:
    @staticmethod
    def add(a, b):
        return a + b

    @staticmethod
    def multiply(a, b):
        return a * b
    
# ----------------------------------------------------------------
# 2. 调用静态方法
    # 静态方法可以通过类名或实例来调用，但它们不会自动接收 self 或 cls 作为参数。

# 通过类名调用静态方法
result = MathUtils.add(3, 5)
print(result)  # 输出: 8

# 通过实例调用静态方法
math_instance = MathUtils()
result = math_instance.multiply(4, 6)
print(result)  # 输出: 24


# ----------------------------------------------------------------
# 3. 静态方法的应用示例

# 示例 1：工具函数
    # 假设我们有一个 User 类，用于管理用户信息。我们可以定义一个静态方法来验证用户的邮箱地址格式是否正确。

import re

class User:
    def __init__(self, username, email):
        self.username = username
        self.email = email

    @staticmethod
    def is_valid_email(email):
        # 使用正则表达式验证邮箱格式
        pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
        return re.match(pattern, email) is not None

# 使用静态方法验证邮箱
email = "example@example.com"
if User.is_valid_email(email):
    print(f"{email} is a valid email address.")
else:
    print(f"{email} is not a valid email address.")


# ----------------------------------------------------------------    
# 示例 2：辅助功能
    # 假设我们有一个 Rectangle 类，用于表示矩形。我们可以定义一个静态方法来计算两个矩形的面积之和。

class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

    @staticmethod
    def sum_areas(rect1, rect2):
        return rect1.area() + rect2.area()

# 创建两个矩形对象
rect1 = Rectangle(4, 5)
rect2 = Rectangle(3, 6)

# 使用静态方法计算两个矩形的面积之和
total_area = Rectangle.sum_areas(rect1, rect2)
print(f"Total area: {total_area}")  # 输出: Total area: 38



#########################################################################################
# 静态方法的优点
    # 代码清晰：静态方法明确表示该方法不依赖于类或实例的状态，有助于提高代码的可读性和维护性。
    # 逻辑分离：静态方法可以帮助将某些逻辑从类的其他方法中分离出来，使代码更具模块化。
    # 性能优化：由于静态方法不依赖于实例或类的状态，Python 解释器可以在调用时跳过不必要的绑定操作，从而提高性能。


# 静态方法的注意事项
    # 不能访问实例属性：静态方法不能访问或修改实例的属性，因为它没有 self 参数。如果你需要访问实例属性，应该使用实例方法。
    # 不能访问类属性：静态方法也不能访问或修改类的属性，因为它没有 cls 参数。如果你需要访问类属性，应该使用类方法。
    # 避免滥用：虽然静态方法非常有用，但不要过度使用。如果一个方法需要频繁访问类或实例的状态，那么它应该是一个实例方法或类方法，而不是静态方法。


# 总结
    # 静态方法 是一种不依赖于类或实例状态的方法，通常用于实现工具函数或辅助功能。
    # 静态方法通过 @staticmethod 装饰器定义，既可以通过类名调用，也可以通过实例调用。
    # 静态方法适用于那些与类相关但不需要访问类或实例状态的场景。