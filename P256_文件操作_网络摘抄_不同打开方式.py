# 在 Python 中，文件的打开模式决定了你对文件可以进行的操作，
#   例如读取、写入或执行。然而，Python 的 open() 函数并不直接支持同时允许写入、读取和执行的模式。
#   相反，它提供了多种不同的模式来满足不同的需求。

# 文件打开模式
#   open() 函数的模式参数是一个字符串，指定了文件的打开方式。常见的模式包括：

# r：只读模式（默认）。如果文件不存在，则会引发 FileNotFoundError。
# w：只写模式。如果文件存在，则会被截断（即清空）；如果文件不存在，则会创建新文件。
# a：追加模式。如果文件存在，则会在文件末尾追加内容；如果文件不存在，则会创建新文件。
# x：独占创建模式。如果文件已存在，则会引发 FileExistsError；如果文件不存在，则会创建新文件。
# b：二进制模式。与上述模式结合使用，表示以二进制形式读取或写入文件。
# t：文本模式（默认）。与上述模式结合使用，表示以文本形式读取或写入文件。
# +：更新模式。与上述模式结合使用，表示文件可以同时进行读取和写入。
# 同时允许读取和写入的模式
# 如果你想同时允许读取和写入文件，可以使用以下几种模式：

# r+：以读写模式打开文件。文件必须存在，否则会引发 FileNotFoundError。你可以读取现有内容，并在任意位置写入新内容。
# w+：以读写模式打开文件。如果文件存在，则会被截断（即清空）；如果文件不存在，则会创建新文件。你可以读取和写入新内容。
# a+：以读写模式打开文件。如果文件存在，则会在文件末尾追加内容；如果文件不存在，则会创建新文件。你可以读取现有内容，并在文件末尾追加新内容。
#############################################################################################################

# 示例：使用 r+ 模式
# 以读写模式打开文件
with open('P256_example.txt', 'r+') as file:
    # 读取现有内容
    content = file.read()
    print("Existing content:", content)
    # 写入新内容（覆盖现有内容）
    file.write("New content")



# 示例：使用 w+ 模式    
# 以读写模式打开文件（清空文件）
with open('P256_example.txt', 'w+') as file:
    # 写入新内容
    file.write("Hello, World!")
    # 将文件指针移到开头
    file.seek(0)
    # 读取新内容
    content = file.read()
    print("New content:", content)


# 示例：使用 a+ 模式
# 以读写模式打开文件（追加内容）
with open('P256_example.txt', 'a+') as file:
    # 将文件指针移到开头
    file.seek(0)
    # 读取现有内容
    content = file.read()
    print("Existing content:", content)
    # 追加新内容
    file.write("\nNew line of content")



#############################################################################################################
# 执行权限
#   Python 的 open() 函数本身并不支持为文件设置执行权限。文件的执行权限通常由操作系统管理，而不是由 Python 的文件操作模式控制。
#   如果你需要为文件设置执行权限，可以在文件创建或修改后使用 os 模块中的 chmod() 函数来更改文件的权限。



# 示例：设置文件的执行权限    
import os
# 创建一个文件并写入内容
with open('P256_example_script.sh', 'w') as file:
    file.write("#!/bin/bash\n")
    file.write("echo 'Hello, World!'")
# 设置文件的执行权限（仅限 Unix 系统）
os.chmod('P256_example_script.sh', 0o755)  # 0o755 表示所有者可读写执行，其他用户可读执行
print("File permissions set.")

# 在这个例子中，我们创建了一个名为 script.sh 的脚本文件，并为其设置了执行权限。os.chmod() 函数的第一个参数是要修改权限的文件路径，
#       第二个参数是权限掩码。0o755 是八进制表示法，表示所有者有读、写、执行权限，而其他用户只有读和执行权限。




#############################################################################################################
# 总结
#     r+：以读写模式打开文件，文件必须存在。
#     w+：以读写模式打开文件，文件会被截断或创建。
#     a+：以读写模式打开文件，文件会在末尾追加内容或创建。
#     执行权限：Python 的 open() 函数不支持设置执行权限。你需要使用 os.chmod() 来更改文件的权限。
#     如果你需要同时允许读取、写入和执行文件，建议先使用适当的读写模式（如 r+、w+ 或 a+），
#     然后在文件创建或修改后使用 os.chmod() 来设置执行权限。