# 4.2 函数工厂
# 闭包可以用来创建“函数工厂”，即根据不同的参数生成不同行为的函数。这在需要动态生成函数时非常有用。

# 示例 5：函数工厂


def make_adder(n):
    def add(x):
        return x + n
    return add

# 创建两个不同的加法器
add_5 = make_adder(5)
add_10 = make_adder(10)

# 使用加法器
print(add_5(3))   # 输出: 8
print(add_10(3))  # 输出: 13




####################################################################
# 解释：

# make_adder 是一个函数工厂，它接受一个参数 n，并返回一个闭包 add，该闭包可以根据 n 的值来添加不同的数。
# 我们创建了两个不同的加法器 add_5 和 add_10，它们分别将 n 设置为 5 和 10。
# 当我们调用 add_5(3) 时，add 记住了 n = 5，因此返回 3 + 5 = 8。
# 当我们调用 add_10(3) 时，add 记住了 n = 10，因此返回 3 + 10 = 13。