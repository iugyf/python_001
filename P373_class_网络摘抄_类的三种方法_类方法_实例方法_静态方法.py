# 摘自：通义千问2025-1-2
# 问：类的三种方法


# 答：
# 在 Python 中，类可以定义三种主要类型的方法：
# 实例方法（Instance Methods）、类方法（Class Methods） 和 静态方法（Static Methods）。
# 每种方法都有其特定的用途和行为。下面我们将详细解释这三种方法的区别和用法。

########################################################################################
# 1. 实例方法（Instance Methods）
    # 定义：
        # 实例方法 是最常见的一种方法，它需要通过类的实例来调用。
        # 实例方法的第一个参数是 self，表示当前实例对象。通过 self，可以在方法内部访问实例的属性和其他方法。
    # 特点：
        # 依赖于实例：实例方法可以访问和修改实例的属性。
        # 只能通过实例调用：实例方法必须通过类的实例来调用，不能直接通过类名调用。
        # 自动传递 self 参数：当你通过实例调用实例方法时，Python 会自动将该实例作为第一个参数传递给方法。

    # 示例：

class Dog:
    def __init__(self, name):
        self.name = name

    def bark(self):
        print(f"{self.name} says woof!")

# 创建 Dog 类的实例
dog = Dog("Buddy")

# 调用实例方法
dog.bark()  # 输出: Buddy says woof!





#########################################################################################
# 2. 类方法（Class Methods）
    # 定义：
        # 类方法 是一种与类本身相关联的方法，而不是与具体的实例相关联。
        # 类方法使用 @classmethod 装饰器来定义，它的第一个参数是 cls，表示当前类本身。通过 cls，可以在方法内部访问类的属性和其他类方法。
    # 特点：
        # 依赖于类：类方法可以访问和修改类的属性，但不能直接访问实例的属性。
        # 可以通过类或实例调用：类方法既可以通过类名调用，也可以通过实例调用。无论通过哪种方式调用，Python 都会自动将类本身作为第一个参数传递给方法。
        # 自动传递 cls 参数：当你通过类或实例调用类方法时，Python 会自动将类作为第一个参数传递给方法。

    # 示例：

class Cat:
    species = "Felis catus"

    def __init__(self, name):
        self.name = name

    @classmethod
    def get_species(cls):
        return cls.species

# 通过类名调用类方法
print(Cat.get_species())  # 输出: Felis catus

# 通过实例调用类方法
cat = Cat("Whiskers")
print(cat.get_species())  # 输出: Felis catus


    # 类方法的常见用途：
        # 工厂方法：类方法常用于创建类的实例，特别是当需要根据不同的输入创建不同类型的实例时。
        # 替代构造函数：类方法可以用作类的替代构造函数，提供多种方式来初始化类的实例。

    # 工厂方法示例：

class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

    @classmethod
    def from_square(cls, side_length):
        return cls(side_length, side_length)

# 使用类方法创建正方形
square = Rectangle.from_square(5)
print(square.area())  # 输出: 25





# #########################################################################################
# 3. 静态方法（Static Methods）
    # 定义：
        # 静态方法 是一种不依赖于类或实例状态的方法。它既不接收 self 参数，也不接收 cls 参数。
        # 静态方法使用 @staticmethod 装饰器来定义。它更像是一个普通的函数，只是因为它与类相关联，所以放在类内部。
    # 特点：
        # 不依赖于类或实例：静态方法不能访问或修改类或实例的属性。
        # 可以通过类或实例调用：静态方法既可以通过类名调用，也可以通过实例调用。无论通过哪种方式调用，Python 都不会自动传递任何参数。
        # 适合工具函数：静态方法通常用于实现一些与类相关的工具函数或辅助功能，这些函数不需要访问类或实例的状态。

    # 示例：

class MathUtils:
    @staticmethod
    def add(a, b):
        return a + b

    @staticmethod
    def multiply(a, b):
        return a * b

# 通过类名调用静态方法
result = MathUtils.add(3, 5)
print(result)  # 输出: 8

# 通过实例调用静态方法
math_instance = MathUtils()
result = math_instance.multiply(4, 6)
print(result)  # 输出: 24


    # 静态方法的常见用途：
        # 工具函数：静态方法常用于实现一些与类相关的工具函数，例如验证输入、计算某些值等。
        # 逻辑分离：静态方法可以帮助将某些逻辑从类的其他方法中分离出来，使代码更具模块化和可读性。


#########################################################################################
# 三者对比
    # 方法类型	  第一个参数     调用方式	         用途
    # 实例方法	  self        	通过实例调用	     访问和修改实例的状态
    # 类方法	  cls           通过类或实例调用	 访问和修改类的状态
    # 静态方法	  无            通过类或实例调用	 不依赖于类或实例的状态



#########################################################################################
# 总结
    # 实例方法 是最常用的方法，依赖于实例，可以访问和修改实例的属性。
    # 类方法 依赖于类，可以访问和修改类的属性，常用于工厂方法或替代构造函数。
    # 静态方法 不依赖于类或实例，适合用于工具函数或辅助功能。

    # 选择哪种方法取决于你的具体需求：
        # 如果你需要访问或修改实例的状态，使用 实例方法。
        # 如果你需要访问或修改类的状态，使用 类方法。
        # 如果你有一个与类相关但不依赖于类或实例状态的功能，使用 静态方法。