# 命名约定（Naming Conventions）是编程中用于定义标识符（如变量、函数、类、模块等）名称的规则和指导方针。
    # 良好的命名约定可以提高代码的可读性、可维护性和一致性，使其他开发者更容易理解和协作。
    # Python 社区遵循 PEP 8（Python Enhancement Proposal 8），
    # 这是 Python 的官方风格指南，它为编写 Python 代码提供了一系列建议，包括命名约定。

# 以下是 PEP 8 中推荐的命名约定：

# 1. 包和模块名
    # 全小写：使用简短、全小写的单词。
    # 下划线：如果有多个单词，可以用下划线分隔（snake_case）。
    # 示例：my_module, http_server

# 2. 类名
    # 驼峰命名法（CamelCase）：每个单词的首字母大写，不使用下划线。
    # 示例：MyClass, HttpServer

# 3. 函数和变量名
    # 全小写：使用简短、全小写的单词。
    # 下划线：如果有多个单词，可以用下划线分隔（snake_case）。
    # 示例：my_function, user_name

# 4. 常量
    # 全大写：使用全大写字母，如果有多个单词，用下划线分隔。
    # 示例：MAX_CONNECTIONS, DEFAULT_TIMEOUT

# 5. 私有成员
    # 单个下划线前缀：表示该成员是“内部使用的”，不应在模块外部直接访问。
        # 示例：_private_variable, _internal_function
    # 双下划线前缀：表示“强私有”，会触发 Python 的名称改写机制，避免子类覆盖。
        # 示例：__strong_private_variable

# 6. 特殊方法
    # 双下划线前后缀：特殊方法（也称为魔术方法或 dunder 方法）以双下划线开头和结尾。python系统自带的，用户不要用。
    # 示例：
    # __init__：构造实例对象
    # +: __add__ 
    # -: __truediv__ 
    # *: __mul__
    # /, __sub__
    # >, __gt__
    # <, __lt__
    # ==: __eq__ 
    # !=: __ne__
    # >=, __ge__
    # <=, __le__
    # //: __floordiv__：整除
    # %: __mod__
    # str: __str__: 转换成字符串

# 7. 函数和方法参数
    # self：类的方法的第一个参数应命名为 self，表示实例本身。
    # cls：类方法的第一个参数应命名为 cls，表示类本身。
    # 示例：
class MyClass:
    def my_method(self, arg1, arg2):
        pass

    @classmethod
    def my_class_method(cls, arg1, arg2):
        pass

    
# 8. 全局变量
    # 全小写：通常与普通变量相同，但如果是配置或常量，可以考虑使用全大写。
    # 示例：global_variable, CONFIG_VALUE

# 9. 类型提示
    # 类型别名：如果定义了类型别名，应该使用驼峰命名法。
    # 示例：

from typing import List, Dict

UserId = int
UserDict = Dict[str, UserId]


# 10. 避免使用的关键字
    # 避免使用 Python 关键字：不要使用 Python 的保留关键字作为变量名或函数名，例如 class, def, if, else 等。
    # 避免使用单个字符：除非是在非常短的作用域内（如循环中的索引），否则尽量避免使用单个字符作为变量名，如 i, j, x 等。
# 11. 注释和文档字符串
    # 函数和类的文档字符串：使用三重引号 """ 来编写文档字符串，描述函数或类的功能、参数和返回值。
    # 示例：

def add(a: int, b: int) -> int:
    """返回两个整数的和。

    参数:
        a (int): 第一个整数
        b (int): 第二个整数

    返回:
        int: 两个整数的和
    """
    return a + b


# 12. 文件名和目录名
    # 全小写：文件名和目录名应使用全小写，如果有多个单词，用下划线分隔。
    # 示例：my_script.py, utils/

# 13. 测试文件
    # 以 test_ 开头：测试文件的名称应以 test_ 开头，以便测试框架（如 unittest 或 pytest）能够自动发现它们。
    # 示例：test_my_module.py

# 14. 虚拟环境
    # 虚拟环境目录：虚拟环境的目录通常命名为 venv 或 .venv，以区分项目中的其他文件夹。

# 15. 避免混淆的字符
    # 避免使用相似的字符：避免使用容易混淆的字符，如 O（大写字母 O）和 0（数字零），l（小写字母 L）和 1（数字一）。
    # 示例：o 和 0，l 和 1 可能会导致视觉上的混淆，因此应尽量避免。

# 16. 一致性
    # 保持一致性：最重要的是在整个项目中保持一致的命名风格。即使你选择不完全遵循 PEP 8，也应该确保团队内的所有成员都遵循相同的命名规则。


# 总结
    # PEP 8 是 Python 社区广泛接受的风格指南，遵循这些命名约定可以帮助你编写更清晰、更易维护的代码。
    # 如果你是团队的一员，确保与团队成员讨论并达成一致的命名规则，以确保代码的一致性和可读性。